package starter.components;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.UnavailableException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import it.classhidra.annotation.elements.Action;
import it.classhidra.annotation.elements.ActionCall;
import it.classhidra.annotation.elements.Entity;
import it.classhidra.annotation.elements.Expose;
import it.classhidra.annotation.elements.Parameter;
import it.classhidra.annotation.elements.Redirect;
import it.classhidra.annotation.elements.Rest;
import it.classhidra.annotation.elements.SessionDirective;
import it.classhidra.core.controller.action;
import it.classhidra.core.controller.i_action;
import it.classhidra.core.controller.redirects;
import it.classhidra.core.controller.response_wrapper;
import it.classhidra.core.tool.exception.bsControllerException;
import it.classhidra.serialize.JsonWriter;
import it.classhidra.serialize.Serialized;


@Action (
	path="restful",
	entity=@Entity(
			property="always:public"
	),
	Redirect=@Redirect(path="/starter/pages/rest.html"),
	Expose=@Expose(
			method="GET,POST"
			)
)
@SessionDirective
//@NavigatedDirective(memoryContent="true")
public class ControllerRest extends action implements i_action, Serializable{
	private static final long serialVersionUID = -1L;

	@Serialized
	private List<SimpleItemForRest> items;
	

	public redirects actionservice(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, UnavailableException, bsControllerException {

		return new redirects(get_infoaction().getRedirect());
	}
	
	
@ActionCall(
	name="getitems",
	Expose=@Expose(
		method="GET",
		restmapping={
			@Rest(path="/restful/examples/")
		}
	),
	Redirect=@Redirect(contentType="application/json")
)	public String prepareItems(String modelName){
		if(modelName==null || modelName.equals("")){
			if(get_infobean()!=null && get_infobean().getName()!=null && !get_infobean().getName().equals(""))
				modelName = get_infobean().getName();
			else if(get_infoaction()!=null && get_infoaction().getName()!=null && !get_infoaction().getName().equals(""))
				modelName = get_infoaction().getName();
			else
				modelName = "model";
		}
		return JsonWriter.object2json(this.get_bean().asBean(), modelName);
	}	
	
@ActionCall(
	name="getitem",
	Expose=@Expose(
		method="GET",
		restmapping={
			@Rest(path="/restful/examples/",parametermapping="/selectedId/")
		}
	),
	Redirect=@Redirect(contentType="application/json")
)	public response_wrapper prepareItem(
			@Parameter(name="selectedId") int id,
			@Parameter(name="items") List<SimpleItemForRest> list){
		for(int i=0;i<list.size();i++){
			SimpleItemForRest current = (SimpleItemForRest)list.get(i);
			if(current.getId()==id)
				return
						new response_wrapper()
						.setContent(JsonWriter.object2json(current, "item"))
						.setResponseStatus(Rest.EXIST_200);

			
		}
		return 
				new response_wrapper()
				.setContent("{\"error\":\"Item entity ["+id+"] is missing\"}")
				.setResponseStatus(Rest.NOTFOUND_404);	
	}
	
@ActionCall(
	name="putitem",
	Expose=@Expose(
		method="PUT",
		restmapping={
			@Rest(path="/restful/examples/",parametermapping="/selectedId/")
		}
	),
	Redirect=@Redirect(contentType="application/json")
)	public response_wrapper putItem(
			@Parameter(name="selectedId") int id,
			@Parameter(name="item") SimpleItemForRest item){
		if(item==null)
			return 
				new response_wrapper()
				.setContent("{\"error\":\"Item entity is missing\"}")
				.setResponseStatus(Rest.MISSING_PARAMETERS_400);
		for(int i=0;i<items.size();i++){
			SimpleItemForRest current = (SimpleItemForRest)items.get(i);
			if(current.getId()==id){
				current.setName(item.getName());
				current.setSurname(item.getSurname());
				return 
						new response_wrapper()
						.setContent(JsonWriter.object2json(current, "item"))
						.setResponseStatus(Rest.CREATED_201);
			}
		}
		return 
				new response_wrapper()
				.setContent("{\"error\":\"Item entity ["+id+"] is missing\"}")
				.setResponseStatus(Rest.NOTFOUND_404);		
	}	
	
@ActionCall(
	name="postitem",
	Expose=@Expose(
		method="POST",
		restmapping={
			@Rest(path="/restful/examples/")
		}
	),
	Redirect=@Redirect(contentType="application/json")
)	public response_wrapper postItem(@Parameter(name="item") SimpleItemForRest item){
		if(item==null)
			return 
					new response_wrapper()
					.setContent("{\"error\":\"Item entity is missing\"}")
					.setResponseStatus(Rest.MISSING_PARAMETERS_400);
		
		for(int i=0;i<items.size();i++){
			SimpleItemForRest current = (SimpleItemForRest)items.get(i);
			if(current.getId()==item.getId()){
				return 
						new response_wrapper()
						.setContent("{\"error\":\"Dupplicated item entity\"}")
						.setResponseStatus(Rest.NOTALLOWED_405);						
			}
		}
		items.add(item);
		String modelName = "";
		if(modelName==null || modelName.equals("")){
			if(get_infobean()!=null && get_infobean().getName()!=null && !get_infobean().getName().equals(""))
				modelName = get_infobean().getName();
			else if(get_infoaction()!=null && get_infoaction().getName()!=null && !get_infoaction().getName().equals(""))
				modelName = get_infoaction().getName();
			else
				modelName = "model";
		}		
		return 
				new response_wrapper()
				.setContent(JsonWriter.object2json(this.get_bean().asBean(), modelName))
				.setResponseStatus(Rest.CREATED_201);	
				
	}		
	
@ActionCall(
	name="deleteitem",
	Expose=@Expose(
		method="DELETE",
		restmapping={
			@Rest(path="/restful/examples/",parametermapping="/selectedId/")
		}
	),
	Redirect=@Redirect(contentType="application/json")
)	public response_wrapper deleteItem(
			@Parameter(name="selectedId") int id){

		for(int i=0;i<items.size();i++){
			SimpleItemForRest current = (SimpleItemForRest)items.get(i);
			if(current.getId()==id){
				items.remove(current);
				String modelName = "";
				if(modelName==null || modelName.equals("")){
					if(get_infobean()!=null && get_infobean().getName()!=null && !get_infobean().getName().equals(""))
						modelName = get_infobean().getName();
					else if(get_infoaction()!=null && get_infoaction().getName()!=null && !get_infoaction().getName().equals(""))
						modelName = get_infoaction().getName();
					else
						modelName = "model";
				}		
				return 
						new response_wrapper()
						.setContent(JsonWriter.object2json(this.get_bean().asBean(), modelName))
						.setResponseStatus(Rest.CREATED_201);	
			}
		}
		return 
				new response_wrapper()
				.setContent("{\"error\":\"Item entity ["+id+"] is missing\"}")
				.setResponseStatus(Rest.NOTFOUND_404);	
	}	
	

	public List<SimpleItemForRest> getItems() {
		return items;
	}

	public void setItems(List<SimpleItemForRest> items) {
		this.items = items;
	}


	public void reimposta() {
		super.reimposta();
		items = new ArrayList<SimpleItemForRest>();
		items.add(new SimpleItemForRest(10,"Mario","Rossi"));
		items.add(new SimpleItemForRest(11,"Bob","Dylan"));
	}

	
	
}
